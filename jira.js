const createIssue = require("./create-issue");
const createProject = require("./create-project");
const getUsers = require("./get-users");
const updateStatus = require("./update-status");



const getUsersFunc = async () => {
    const users = await getUsers();
    console.log(users)
  }
  
  // Step 1, get user account ID to be able to assign a new project to a user
  // Get users - needed to get the leadAccountID to be able to create a project!
//   getUsersFunc();




const createProjectIssueAndUpdate = async () => {

    const projectName = process.env.PROJECT_NAME
    const projectKey = await createProject(projectName);
    console.log(`Created project with key: ${projectKey}`);
  
    // // // When creating an issue, we need the following parameters, issueType, summary, and description. 
    // // // Read more about this on the JIRA Cloud REST API docs: https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-issues/#api-rest-api-3-issue-post
    const issueType = 'Task';
    const summary = 'testing for creating project';
    const description = 'Do so now!!'
  
    // Note that we are using the project key which will be auto created in the above function call
    const issueKey = await createIssue(projectKey, issueType, summary, description);
    console.log(`Created issue with key: ${issueKey}`);
  
    // Notes about statusID: statusID corresponds to " 11 == "To Do", 21=="In Progress", 31=="In Review", 41=="Done"
    // for more info on statusID use the `get-transtions.js` file to see all available transitions
    // since we are hard coding `21` below this means we will update the issue to In Progress
    const statusID = '21'
  
    // Add issueKey you want to update. This will be the key which we autogenerated from the issue above.
    const update = await updateStatus(issueKey, statusID);
    console.log(update)
  }


  createProjectIssueAndUpdate();

  